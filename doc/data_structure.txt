@startuml
skinparam {
	defaultFontName Geneva
}
package Cipher <<Frame>> {
	class cdraft << (M,crimson) >> {
		CIPHERID
		--
		-cdraftid : CDRAFTID
		version : uint16
		no : uint16
		formal : bool
		name : string
		tags : string[]
		editors : name[]
		hash : ipfskey
		nofapproval : uint16
		approvers : name[]
		approved : name[]
		tasklist : TASKID[]
		tokenlist : TOKENID[]
		--
		key2 -> version + no
	}

	class cformal << (M,crimson) >> {
		"myphersystem"
		--
		-ciperid : CIPHERID
		cdraftid : CDRAFTID
		name : string
		tags : string[]
	}
}

package Token <<Frame>> {
	class token << (M,crimson) >> {
		"myphersystem"
		--
		-tokenid : TOKENID
		name : string
		issuer : CIPHERID
		limit : uint64
		when : uint8
		disposal : uint8
		type : uint8
		taskid : TFORMALID
		extokenid : TOKENID
		reftoken : uint64
		rcalctype : uint8
		nofdesttoken : uint64
		nofdesteos : float64
		approval_4ex : name[]
		--
		key2 -> issuer	
	}

	class issue << (M,crimson) >> {
		TOKENID
		--
		-owner : name
		quantity : uint64
	}
}

package Task <<Frame>> {
	class tformal << (M,crimson) >> {
		"myphersystem"
		--
		-tformalid : TFORMALID
		cipherid : CIPHERID
		tdraftid : TDRAFTID
		name : string
		approve_pic : name[]
		approve_results : name[]
		tags : string[]
		--
		key2 -> cipherid 
	}
	class tdraft << (M,crimson) >> {
		CIPHERID
		--
		-tdraftid : TDRAFTID
		name : string
		rewardid : TOKENID
		quantity : uint64
		nofapproval : uint8
		approvers : name[]
		pic : name[]
		hash : ipfskey
		tags : string[]
	}
}

package Person <<Frame>> {
	class person << (M,crimson) >> {
		"myphersystem"
		--
		-personid : name
		name : string
		tags : string[]
		hash : string
		tokenlist : TOKENID[]
	}
}



@enduml
